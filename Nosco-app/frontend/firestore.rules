rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isActiveWorker() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'active';
    }

    // Users collection
    match /users/{userID} {
      allow read: if request.auth != null;

      // Let an admin create or update any user doc,
      // OR let the user themselves create/update their own doc
      allow write: if (request.auth != null) && (
        isAdmin() ||   // admin can write any doc
        request.auth.uid == userID  // user can write their own doc
      );
    }

    // Projects collection
    match /projects/{projectID} {
      allow read: if request.auth != null;
      // Allow any authenticated user to update projects during testing
      allow update: if request.auth != null;
      allow create, delete: if isAdmin();
    }
    
    match /payments/{paymentID} {
      allow read: if request.auth != null && 
        (resource.data.userID == request.auth.uid || isAdmin());
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.userID == request.auth.uid || isAdmin());
      allow delete: if request.auth != null && isAdmin();
    }

    // Update expense rules to handle general expenses
    match /expense/{expenseID} {
      // Helper function to check if an expense is linked to any of the user's payments
      function isExpenseLinkedToUserPayment() {
        // Get all payments for the current user that reference this expense
        let userPayments = firestore.get(/databases/$(database)/documents/payments
          .where("userID", "==", request.auth.uid)
          .where("relatedExpenseIDs", "array-contains", expenseID));

        // Return true if any such payment exists
        return userPayments.size() > 0;
      }

      allow read: if request.auth != null && (
        resource == null || 
        resource.data.userID == request.auth.uid ||
        isAdmin() ||
        resource.data.isGeneralExpense == true || // allow reading company expenses
        isExpenseLinkedToUserPayment()  // allow if the expense is linked to any of the user's payments
      );

      allow create: if request.auth != null && (
        (!request.resource.data.isGeneralExpense && request.resource.data.userID == request.auth.uid) ||
        (request.resource.data.isGeneralExpense && isAdmin())
      );

      allow update: if request.auth != null && (
        (resource.data.userID == request.auth.uid && !resource.data.isGeneralExpense) ||
        isAdmin()
      );

      allow delete: if request.auth != null && isAdmin();
    }
    
    // Notifications collection - more permissive for testing
    match /notifications/{notificationId} {
      // Allow any authenticated user to read/create notifications during testing
      allow read, create: if request.auth != null;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userID;
      allow delete: if isAdmin();
    }
    
    match /feedback/{docID} {
      // Allow reads for authenticated users (their own or admin)
      allow read: if request.auth != null && (
        resource.data.userID == request.auth.uid || 
        request.auth.token.role == 'admin'
      );

      // Allow anonymous users to create feedback
      allow create: if 
        // For authenticated users
        (request.auth != null && 
         request.resource.data.userID == request.auth.uid &&
         request.resource.data.status == 'New') ||
        // For anonymous users
        (request.auth == null && 
         request.resource.data.anonymous == true &&
         request.resource.data.email != null &&
         request.resource.data.status == 'New');

      // Allow updates by authenticated users
      allow update: if request.auth != null && (
        (resource.data.userID == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['updatedAt', 'message', 'subject'])) ||
        request.auth.token.role == 'admin'
      );

      // Allow deletion by admins
      allow delete: if request.auth != null && 
        request.auth.token.role == 'admin';
    }
    
    match /workHours/{workHourID} {
      allow read: if request.auth != null && (
        // Workers can read their own work hours
        resource.data.userID == request.auth.uid ||
        // Admins can read all work hours
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );

      allow create: if request.auth != null && 
        request.resource.data.userID == request.auth.uid;

      allow update: if request.auth != null && (
        // Workers can only update their own pending work hours
        (resource.data.userID == request.auth.uid && 
         resource.data.status == 'pending') ||
        // Admins can update any work hours
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow delete: if request.auth != null && isAdmin();

      // Added new validation for paid field
      function validateWorkHourUpdate() {
        return (
          // Ensure paid field is a boolean
          request.resource.data.paid is bool &&
          // If marking as paid, ensure it's by an admin
          (!request.resource.data.paid || 
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        );
      }
    }
    
    match /expenseTypes/{typeID} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    match /b/{bucket}/o {
      match /receipts/{allPaths=**} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }
    }
    
    // Project Invitations rules
    match /projectInvitations/{invitationId} {
      // Read permissions
      allow read: if request.auth != null && (
        // Users can read their own invitations
        resource.data.userID == request.auth.uid ||
        // Admins can read all invitations
        isAdmin()
      );

      // Create permissions (only admin)
      allow create: if isAdmin();

      // Update permissions
      allow update: if request.auth != null && (
        // A worker can update ANY fields if they own the doc
			  (resource.data.userID == request.auth.uid) ||
        // Admins can update everything
        isAdmin()
      );

      // Delete permissions (only admin)
      allow delete: if isAdmin();
    }
    
    match /settings/{docID} {
      // Let admin read/write
      allow read: if request.auth != null; 
			allow write: if isAdmin();
    }
  }
}